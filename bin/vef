#!/bin/bash

function printhelp {
cat <<'EOF'
-- vef - the Very Easy Firewall --

A very basic firewalling script that allows you to manage sets of rule files
and apply them as needed.

--- Usage ---

	vef list
	vef apply SETNAME

SETNAME is the name of a set directory in /etc/vefirewall/sets, or an explicit
path to a set directory.

--- Sets ---

You can define sets in /etc/vefirewall/sets , or save them anywhere you wish.

A set is a folder consisting of at least two files, "input" and "output"

Each "input" and "output" file can list any number of port specifications,
and allow empty lines and comment lines. Each also spciy the policy for
the flow direction -- for example, an input file could look like this:

	#%POLICY=DROP

	# Normal HTTP traffic on any interface
	80 443

	# Accept alt web on some internal interface eth2 only
	%eth2 8080

	# Minetest
	30000u

Note the Minetest port, which expects UDP traffic, denoted by a "u". The default
assignment is to TCP, but ports can also be specified for both:

	5000ut # opens port 5000 for both UDP and TCP traffic

Another file, "forward" is available to specify the policy for the FORWARD chain.

Two other files are available are "rawpre" and "rawpost". These allow you to apply
rules before, and after, the input and output files are processed. These files simply
contain raw arguments to iptables. For example, you may have this in your rawpre file:

	-t nat PREROUTING -p tcp -i eth1 --dport 8080 -j DNAT --to-destination 192.168.56.5:80

to perform some port forwarding from the host's port 8080 to some internal server on port 80.

--- SSH ---

By default, the port of the SSH daemon is detected and added to the
allowed incoming ports. To cancel this behaviour, set the NOSSH variable:

	NOSSH=true vef apply default

EOF
}

GLOBALSETS=/etc/vefirewall/sets

function allowestablished {
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -p icmp -j ACCEPT
	iptables -A INPUT -i lo -j ACCEPT

	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A OUTPUT -p icmp -j ACCEPT
}

function resetfirewall {
	iptables -P OUTPUT ACCEPT
	iptables -P INPUT ACCEPT
	iptables -F

	iptables -F -t nat PREROUTING
}

function allowport {
	local CHAIN="$1"
	local tlayer="$2"
	local port="$3"
	local interface="$4"

	if [[ -n "$interface" ]]; then
		interface="-i $interface"
	fi

	iptables -A "$CHAIN" -m state $interface --state NEW -p "$tlayer" --dport "$port" -j ACCEPT
}

function getsshport {
	egrep '^Port'|head -n 1|sed -r 's/^Port\s+//'
}

function allowssh {
	allowport INPUT tcp "$(getsshport)"
}

function applychainrules {
	local CHAIN="$1"; shift
	local INTERFACE=

	if [[ "$1" =~ ^% ]]; then
		INTERFACE="${1:1}"
		shift
	fi

	for portdef in "$@"; do
		if [[ "$portdef" =~ $(echo "([0-9])([ut]*)") ]]
			local port="${BASH_REMATCH[1]}"
			local tlayers="${BASH_REMATCH[2]}"
			
			if [[ "$tlayers" =~ t ]]; then
				allowport "$CHAIN" tcp "$port" "$INTERFACE"
			fi
			
			if [[ "$tlayers" =~ u ]]; then
				allowport "$CHAIN" udp "$port" "$INTERFACE"
			fi
		fi
	done
}

function readreallines {
	local TFILE="$1"

	grep -P -v '^(\s*)(#.*)?$' "$TFILE" | sed -r 's/#.*$//'
}

function applyfilerules {
	local CHAIN="$1"
	local RULEFILE="$2"
	local inline=

	readreallines "$INFILE"|while read inline; do
		applychainrules "$CHAIN" $inline # do not quote $inline
	done
}

function readpolicy {
	local TFILE="$1"

	egrep '^#%POLICY=' "$TFILE" | sed -r 's/^#%POLICY=//'
}

function setpolicy {
	local CHAIN="$1"
	local POLICY="$2"

	if [[ -n "$POLICY" ]] && [[ "$POLICY" =~ $(echo "ACCEPT|DROP") ]]; then
		iptables -P "$CHAIN" "$POLICY"
	else
		echo "Bad policy [$POLICY]" >&2
	fi
}

function setrawrules {
	local TFILE="$1"
	local inline=

	if [[ ! -f "$TFILE" ]]; then return ; fi

	readreallines "$TFILE"|while read inline; do
		# It SHOULD be safe to just execute this since ";" and "$()" and "|" etc are strings that are not evaluated at this point.
		iptables $inline
	done
}

function applyset {
	local SETDIR="$1"
	
	resetfirewall
	allowestablished

	if [[ -z "${NOSSH:-}" ]]; then
		allowssh
	fi

	setrawrules "$SETDIR/rawpre"

	applyfilesrules INPUT "$SETDIR/input"
	setpolicy INPUT "$(readpolicy "$SETDIR/input")"

	applyfilesrules OUTPUT "$SETDIR/output"
	setpolicy OUTPUT "$(readpolicy "$SETDIR/output")"

	setrawrules "$SETDIR/rawpost"

	setpolicy FORWARD "$(readpolicy "$SETDIR/forward")"
}

function executeset {
	local targetset="$1"

	if [[ -d "$targetset" ]]; then
		applyset "$targetset"
	elif [[ -d "$GLOBALSETS/$targetset" ]]; then
		applyset "$GLOBALSETS/$targetset"
	else
		echo "Could not find set to apply." >&2
	fi
}

function listsets {
	local theset=
	for theset in "$GLOBALSETS"/*; do
		if [[ -f "$theset/input" ]] || [[ -f "$theset/output" ]]; then
			echo -n "$theset "
		fi
	done
}

# --- Main ---

function needroot {
	if [[ "$UID" != 0 ]]; then
		echo "You must be root to run this script"
		exit 1
	fi
}

if [[ -z "$*" ]]; then
	printhelp
elif [[ "$1" = apply ]]; then
	needroot
	executeset "$2"
elif [[ "$1" = list ]]; then
	listsets
else
	echo "Unknown command [$1]" >&2
fi
