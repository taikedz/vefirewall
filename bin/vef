#!/bin/bash

function printhelp {
cat <<'EOF'
Very Easy Firewall - vef

A very basic firewalling script that allows you to manage sets of rule files and apply them as needed.

USAGE

Make vef apply rules at system start or not:

	vef { enable | disable }

List sets in the default location:

	vef list

Load a named set:

	vef load SETNAME

Edit the rule file for the currently loaded set:

	vef edit { input | output | forward | rawpre | rawpost }

Save the active set as a named set:

	vef save SETNAME

Load and apply the named set, or aply a previously loaded set:

	vef apply [SETNAME]

## Sets

Example `input` set rules

	#%POLICY=DROP

	# Normal HTTP traffic on any interface
	80 443

	# Accept alt web on some internal interface eth2 only
	%eth2 8080

	# DNS packets
	53ut

## SSH

By default, the port of the SSH daemon is detected and added to the allowed incoming ports. To cancel this behaviour, set the NOSSH variable:

Example:

	sudo NOSSH=true vef apply default


EOF
}

GLOBALSETS=/etc/vefirewall/sets
SAVEPATH=/etc/vefirewall/savedset
STATUSFILE=/etc/vefirewall/.status

function create_statusfile {
	if [[ ! -f "$STATUSFILE" ]]; then
		if [[ "$UID" != 0 ]]; then
			return 1
		fi
		touch "$STATUSFILE"
		chmod 644 "$STATUSFILE"
	fi
}

: ${EDITOR=nano}

# --------- General firewall operations --------------

function allowestablished {
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -p icmp -j ACCEPT
	iptables -A INPUT -i lo -j ACCEPT

	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A OUTPUT -p icmp -j ACCEPT
}

function resetfirewall {
	mkdir -p /etc/vefirewall/oldrules
	iptables-save > "/etc/vefirewall/oldrules/save-$(date +"%F%T")"

	iptables -P OUTPUT ACCEPT
	iptables -P INPUT ACCEPT
	iptables -F

	iptables -t nat -F
}

function allowport {
	local CHAIN="$1"
	local tlayer="$2"
	local port="$3"
	local interface="$4"

	if [[ -n "$interface" ]]; then
		interface="-i $interface"
	fi

	iptables -A "$CHAIN" -m state $interface --state NEW -p "$tlayer" --dport "$port" -j ACCEPT
}

function readreallines {
	local TFILE="$1"

	grep -P -v '^(\s*)(#.*)?$' "$TFILE" | sed -r 's/#.*$//'
}

# ------- Set meta management -------

function issetdir {
	local theset="$1"
	([[ -f "$theset/input" ]] && [[ -f "$theset/output" ]]) || return 1

	([[ -n "$(readpolicy "$theset/input")" ]] && [[ -n "$(readpolicy "$theset/output")" ]]) || return 1

	return 0
}

function getset {
	local expectedsetdir="$GLOBALSETS/$1"
	if issetdir "$expectedsetdir"; then
		echo "$GLOBALSETS/$1"

	elif issetdir "$1"; then
		echo "$1"

	fi
}

function loadset {
	local setname="$1"; shift
	local TARGETSET="$(getset "$setname")"

	if [[ -z "$TARGETSET" ]]; then
		echo "Invalid set [$setname]" >&2
		return 3
	fi

	if [[ "$TARGETSET" != "$SAVEPATH" ]]; then
		rm -rf "$SAVEPATH" || return 1
		cp "$TARGETSET" -r "$SAVEPATH" || return 2
		echo "Set $setname loaded."

		status_set set "$setname"
		status_set status loaded
		status_set applied no
	fi
}

function storeset {
	local SETNAME="$1"
	local SETPATH="$GLOBALSETS/$SETNAME"

	if [[ -z "$SETNAME" ]]; then
		echo "Name needed" >&2
		exit 4
	fi
	
	if [[ "$(basename "$SETNAME")" != "$SETNAME" ]] || [[ "$SETNAME" =~ $(echo '\.|/') ]]; then
		echo "Invalid set name [$SETNAME]" >&2
		exit 4
	fi

	if [[ -d "$SETPATH" ]]; then
		mv "$SETPATH" "$SETPATH+"
	fi

	cp -r "$SAVEPATH" "$SETPATH"

	if [[ -d "$SETPATH+" ]]; then
		rm -r "$SETPATH+"
	fi

	status_set set "$SETNAME"
	status_set status "loaded"
}

# ----------- SSH assurance --------------

function getsshport {
	egrep '^Port' /etc/ssh/sshd_config |head -n 1|sed -r 's/^Port\s+//'
}

function allowssh {
	local sshport="$(getsshport)"
	if [[ -n "$sshport" ]]; then
		allowport INPUT tcp "$sshport"
	fi
}

# ---------- Chain rules application --------------

function applyportrule {
	local INTERFACE="$1"
	local portdef="$2"

	if [[ "$portdef" =~ $(echo "([0-9]+)([ut]*)") ]]; then
		local port="${BASH_REMATCH[1]}"
		local tlayers="${BASH_REMATCH[2]}"
		
		if [[ "$tlayers" =~ t ]] || [[ -z "$tlayers" ]]; then
			allowport "$CHAIN" tcp "$port" "$INTERFACE"
		fi
		
		if [[ "$tlayers" =~ u ]]; then
			allowport "$CHAIN" udp "$port" "$INTERFACE"
		fi
	fi
}

function applychainrules {
	local CHAIN="$1"; shift
	local INTERFACE=

	if [[ "$1" =~ ^% ]]; then
		INTERFACE="${1:1}"
		shift
	fi

	for portdef in "$@"; do
		applyportrule "$INTERFACE" "$portdef"
	done
}

function applyfilerules {
	local CHAIN="$1"
	local RULEFILE="$2"
	local inline=

	readreallines "$RULEFILE"|while read inline; do
		applychainrules "$CHAIN" $inline # do not quote $inline
	done
}

# ------ Policy R/W operations ------

function readpolicy {
	local TFILE="$1"

	if [[ -f "$TFILE" ]]; then
		egrep '^#%POLICY=' "$TFILE" | sed -r 's/^#%POLICY=//'
	fi
}

function setpolicy {
	local CHAIN="$1"
	local POLICY="$2"

	if [[ -n "$POLICY" ]] && [[ "$POLICY" =~ $(echo "ACCEPT|DROP") ]]; then
		iptables -P "$CHAIN" "$POLICY"
	elif [[ -z "$POLICY" ]]; then
		: "No policy"
	else
		echo "Bad policy [$POLICY]" >&2
	fi
}

# --------- Raw rules processing -------------

function setrawrules {
	local TFILE="$1"
	local inline=

	if [[ ! -f "$TFILE" ]]; then return ; fi

	readreallines "$TFILE"|while read inline; do
		# It SHOULD be safe to just execute this since ";" and "$()" and "|" etc
		# are strings that are not evaluated at this point.
		iptables $inline
	done
}

# ------- Set Application --------------

function applyset {
	local SETDIR="$1"
	
	resetfirewall
	allowestablished

	if [[ -z "${NOSSH:-}" ]]; then
		allowssh
	fi

	setrawrules "$SETDIR/rawpre"

	applyfilerules INPUT "$SETDIR/input"
	setpolicy INPUT "$(readpolicy "$SETDIR/input")"

	applyfilerules OUTPUT "$SETDIR/output"
	setpolicy OUTPUT "$(readpolicy "$SETDIR/output")"

	setrawrules "$SETDIR/rawpost"

	setpolicy FORWARD "$(readpolicy "$SETDIR/forward")"

	status_set applied yes
}


function executeset {
	local targetset="$(getset "$1")"

	if [[ -d "$targetset" ]]; then
		applyset "$targetset"
	else
		echo "Could not find set to apply." >&2
		exit 1
	fi

	echo "Done."
}

function applyactiveset {
	if [[ -d "$SAVEPATH" ]]; then
		executeset "$SAVEPATH"
	else
		echo "vefirewall: No saved set exists"
	fi
}

# --- Status handling ---

function status_set {
	local stoken="$1"; shift
	local sdata="$1"; shift

	# Create setting as empty if eneded
	if ! grep "$stoken" "$STATUSFILE" -q ; then
		echo "$stoken = " >> "$STATUSFILE"
	fi

	sed -r -e "s/^$stoken\\s*=.*/$stoken = $sdata/" -i "$STATUSFILE"
}

function status_print {
	echo -e "\nVery Easy Firewall:\n"
	sed -e 's/^/\t/' "$STATUSFILE"
}

function status_token_get {
	local stoken="$1"; shift
	argcheck "$stoken" setting

	local sdata="$(egrep "^$stoken" "$STATUSFILE")"
	echo "${stoken#* = }"
}

function status_squash {
	echo '' > "$STATUSFILE"
}

# --- Set Handling ---

function listsets {
	local theset=
	for theset in "$GLOBALSETS"/*; do
		if issetdir "$theset"; then
			echo "${theset##*/}"
		fi
	done
}

function doedit {
	local targetfile="$SAVEPATH/$1"
	local sum="$(getsum "$targetfile")"

	"$EDITOR" "$targetfile"
	
	if [[ "$sum" != "$(getsum "$targetfile")" ]]; then
		status_set status modified
		status_set applied no
	fi
}

function getsum {
	md5sum "$1"|cut -d' ' -f1
}

function editset {
	case "$1" in
	input|output|forward|rawpre|rawpost)
		doedit "$1"
		;;
	*)
		echo 'Invalid section' >&2
		echo 'Valid sections are:' >&2
		echo '  input, output, forward, rawpre, rawpost' >&2
		exit 3
		;;
	esac
}

# --- Main ---

function vef_service {
	systemctl "$1" vef || return 1
	status_set service "${1}d"
}

function needroot {
	if [[ "$UID" != 0 ]]; then
		echo "You must be root to run this script"
		exit 1
	fi
}

if [[ -z "$*" ]]; then
	printhelp

elif [[ "$1" = enable ]]; then
	needroot
	vef_service enable

elif [[ "$1" = disable ]]; then
	needroot
	vef_service disable

elif [[ "$1" = apply ]]; then
	needroot
	if [[ -n "$2" ]]; then
		loadset "$2"
	fi
	applyactiveset

elif [[ "$1" = load ]]; then
	needroot
	loadset "$2"

elif [[ "$1" = save ]]; then
	needroot
	storeset "$2"

elif [[ "$1" = edit ]]; then
	needroot
	editset "$2"

elif [[ "$1" = list ]]; then
	needroot
	listsets
elif [[ "$1" = status ]]; then
	create_statusfile && status_print
else
	echo "Unknown command [$1]" >&2
fi
